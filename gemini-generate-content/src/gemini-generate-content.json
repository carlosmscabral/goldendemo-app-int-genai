{
	"snapshotNumber": "1",
	"triggerConfigs": [
		{
			"label": "Private Trigger",
			"triggerType": "PRIVATE_TRIGGER",
			"triggerNumber": "1",
			"triggerId": "private_trigger/gemini-multimodal_Private_1",
			"startTasks": [
				{
					"taskId": "4"
				}
			],
			"properties": {
				"Trigger name": "gemini-multimodal_Private_1"
			}
		},
		{
			"label": "API Trigger",
			"triggerType": "API",
			"triggerNumber": "2",
			"triggerId": "api_trigger/gemini-multimodal_API_1",
			"startTasks": [
				{
					"taskId": "4"
				}
			],
			"properties": {
				"Trigger name": "gemini-multimodal_API_1"
			}
		}
	],
	"taskConfigs": [
		{
			"task": "GenericConnectorTask",
			"taskId": "1",
			"parameters": {
				"actionName": {
					"key": "actionName",
					"value": {
						"stringValue": "POST_v1/%7Bmodel%7D%3AgenerateContent"
					}
				},
				"config": {
					"key": "config",
					"value": {}
				},
				"connectionName": {
					"key": "connectionName",
					"value": {
						"stringValue": "$`CONFIG_vertex-connection-name`$"
					}
				},
				"connectionVersion": {
					"key": "connectionVersion",
					"value": {
						"stringValue": "projects/{projectId}/locations/global/providers/gcp/connectors/vertexai/versions/1"
					}
				},
				"connectorInputPayload": {
					"key": "connectorInputPayload",
					"value": {
						"stringValue": "$`Task_1_connectorInputPayload`$"
					}
				},
				"connectorOutputPayload": {
					"key": "connectorOutputPayload",
					"value": {
						"stringValue": "$`Task_1_connectorOutputPayload`$"
					}
				},
				"dynamicAuthConfig": {
					"key": "dynamicAuthConfig",
					"value": {
						"jsonValue": "null"
					}
				},
				"entityId": {
					"key": "entityId",
					"value": {
						"stringValue": ""
					}
				},
				"entityType": {
					"key": "entityType",
					"value": {
						"stringValue": ""
					}
				},
				"executeQueryRequestConfig": {
					"key": "executeQueryRequestConfig",
					"value": {}
				},
				"filterClause": {
					"key": "filterClause",
					"value": {
						"stringValue": ""
					}
				},
				"listEntitiesPageSize": {
					"key": "listEntitiesPageSize",
					"value": {
						"intValue": "0"
					}
				},
				"listEntitiesPageToken": {
					"key": "listEntitiesPageToken",
					"value": {
						"stringValue": ""
					}
				},
				"listEntitiesSortByColumns": {
					"key": "listEntitiesSortByColumns",
					"value": {
						"stringArray": {}
					}
				},
				"operation": {
					"key": "operation",
					"value": {
						"stringValue": "EXECUTE_ACTION"
					}
				},
				"timeout": {
					"key": "timeout",
					"value": {
						"intValue": "0"
					}
				},
				"useHttpHeaderForDynamicAuthConfig": {
					"key": "useHttpHeaderForDynamicAuthConfig",
					"value": {}
				}
			},
			"displayName": "Invoke Gemini",
			"nextTasks": [
				{
					"taskId": "3"
				}
			],
			"taskExecutionStrategy": "WHEN_ANY_SUCCEED",
			"successPolicy": {},
			"conditionalFailurePolicies": {
				"failurePolicies": [
					{
						"retryStrategy": "EXPONENTIAL_BACKOFF",
						"maxRetries": 3,
						"intervalTime": "1970-01-01T00:00:01Z",
						"condition": "$`ExecutionMode`$ = SYNC"
					},
					{
						"condition": "$`ExecutionMode`$ = SYNC"
					},
					{
						"condition": "$`ExecutionMode`$ = ASYNC"
					}
				]
			},
			"externalTaskType": "NORMAL_TASK"
		},
		{
			"task": "JsonnetMapperTask",
			"taskId": "3",
			"parameters": {
				"template": {
					"key": "template",
					"value": {
						"stringValue": "\n// Import the additional functions library\nlocal f = import \"functions\";\n\nlocal geminiOutput = std.parseJson(std.extVar('`Task_1_connectorOutputPayload`')[0].ResponseBody);\n\n{\n output: geminiOutput.candidates[0].content.parts[0].text,\n}"
					}
				}
			},
			"displayName": "Parse Gemini Response",
			"taskExecutionStrategy": "WHEN_ALL_SUCCEED",
			"successPolicy": {},
			"conditionalFailurePolicies": {
				"failurePolicies": [
					{
						"condition": "$`ExecutionMode`$ = SYNC"
					},
					{
						"condition": "$`ExecutionMode`$ = ASYNC"
					}
				]
			},
			"externalTaskType": "NORMAL_TASK"
		},
		{
			"task": "JsonnetMapperTask",
			"taskId": "4",
			"parameters": {
				"template": {
					"key": "template",
					"value": {
						"stringValue": "local f = import \"functions\";\n\n// Reading variables\nlocal project = std.extVar(\"`CONFIG_vertex-project`\");\nlocal region = std.extVar(\"`CONFIG_vertex-region`\");\nlocal gcsURI = std.extVar(\"gcsURI\");\nlocal maxOutputTokens = std.extVar(\"maxOutputTokens\");\nlocal mimeType = std.extVar(\"mimeType\");\nlocal modelName = std.extVar(\"model-name\");\nlocal prompt = std.extVar(\"prompt\");\nlocal temperature = std.extVar(\"temperature\");\n// Special use case - we can't have both multimodal and googleSearchGrounding - so\n// this code sets googleSearchGrouding to False in case a file is sent, that is\n// file has precedence\nlocal googleSearchGrounding = if gcsURI == '' then std.extVar(\"googleSearchGrounding\") else false;\n\n\n// The next two variables (parts and body) are defined depending on the input for the integration\n// For instance, in parts, we only set fileUri if one is given. For body, we set google search grounding accordingly\nlocal parts = if gcsURI != '' then [{\"text\": prompt}, {\"fileData\":  {\"fileUri\": gcsURI,\"mimeType\": mimeType} } ] \n                            else [{\"text\": prompt}];\n\nlocal body = if googleSearchGrounding then {\n            \"generationConfig\" : {\n                    \"temperature\": temperature,\n                    \"topP\": 0.8,\n                    \"topK\": 40.0,\n                    \"candidateCount\": 1.0,\n                    \"maxOutputTokens\": maxOutputTokens,\n                    \"stopSequences\": []\n            },\n            \"contents\" : [{\n                    \"role\": \"USER\",\n                    \"parts\": parts\n            }],\n            \"tools\": [{\"googleSearchRetrieval\" : {}}]\n        }\n        else {\n            \"generationConfig\" : {\n                    \"temperature\": temperature,\n                    \"topP\": 0.8,\n                    \"topK\": 40.0,\n                    \"candidateCount\": 1.0,\n                    \"maxOutputTokens\": maxOutputTokens,\n                    \"stopSequences\": []\n            },\n            \"contents\" : [{\n                    \"role\": \"USER\",\n                    \"parts\": parts\n            }]\n        };\n\n// This is where we set the final Payload input towards Vertex/Gemini\n{\n    \"`Task_1_connectorInputPayload`\": {\n        \"Path parameters\": {\"model\": \"projects/\" + project + \"/locations/\" + region + \"/publishers/google/models/\" + modelName },\n        \"RequestBody\": body\n    }\n}"
					}
				}
			},
			"displayName": "Prep Gemini Request",
			"nextTasks": [
				{
					"taskId": "1"
				}
			],
			"taskExecutionStrategy": "WHEN_ALL_SUCCEED",
			"successPolicy": {},
			"conditionalFailurePolicies": {
				"failurePolicies": [
					{
						"condition": "$`ExecutionMode`$ = SYNC"
					},
					{
						"condition": "$`ExecutionMode`$ = ASYNC"
					}
				]
			},
			"externalTaskType": "NORMAL_TASK"
		}
	],
	"integrationParameters": [
		{
			"key": "prompt",
			"dataType": "STRING_VALUE",
			"defaultValue": {},
			"inputOutputType": "IN"
		},
		{
			"key": "temperature",
			"dataType": "STRING_VALUE",
			"defaultValue": {
				"stringValue": "0"
			},
			"inputOutputType": "IN"
		},
		{
			"key": "`Task_1_connectorInputPayload`",
			"dataType": "JSON_VALUE",
			"defaultValue": {},
			"producer": "1_1",
			"jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"RequestHasBytes\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates if request has bytes\"\n    },\n    \"ResponseHasBytes\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates if response has bytes\"\n    },\n    \"Path parameters\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"model\": {\n          \"type\": \"string\",\n          \"description\": \"Required. The name of the publisher model requested to serve the prediction. Format: `projects/{project}/locations/{location}/publishers/*/models/*`\"\n        }\n      }\n    },\n    \"RequestBody\": {\n      \"type\": \"object\",\n      \"description\": \"Request message for [PredictionService.GenerateContent].\",\n      \"properties\": {\n        \"generationConfig\": {\n          \"type\": \"object\",\n          \"description\": \"Generation config.\",\n          \"properties\": {\n            \"maxOutputTokens\": {\n              \"type\": \"integer\",\n              \"description\": \"Optional. The maximum number of output tokens to generate per message.\",\n              \"format\": \"int32\"\n            },\n            \"responseMimeType\": {\n              \"type\": \"string\",\n              \"description\": \"Optional. Output response mimetype of the generated candidate text. Supported mimetype: `text/plain`: (default) Text output. `application/json`: JSON response in the candidates. The model needs to be prompted to output the appropriate response type, otherwise the behavior is undefined. This is a preview feature.\"\n            },\n            \"topP\": {\n              \"type\": \"number\",\n              \"description\": \"Optional. If specified, nucleus sampling will be used.\",\n              \"format\": \"float\"\n            },\n            \"presencePenalty\": {\n              \"type\": \"number\",\n              \"description\": \"Optional. Positive penalties.\",\n              \"format\": \"float\"\n            },\n            \"topK\": {\n              \"type\": \"number\",\n              \"description\": \"Optional. If specified, top-k sampling will be used.\",\n              \"format\": \"float\"\n            },\n            \"frequencyPenalty\": {\n              \"type\": \"number\",\n              \"description\": \"Optional. Frequency penalties.\",\n              \"format\": \"float\"\n            },\n            \"temperature\": {\n              \"type\": \"number\",\n              \"description\": \"Optional. Controls the randomness of predictions.\",\n              \"format\": \"float\"\n            },\n            \"stopSequences\": {\n              \"type\": \"array\",\n              \"description\": \"Optional. Stop sequences.\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            },\n            \"candidateCount\": {\n              \"type\": \"integer\",\n              \"description\": \"Optional. Number of candidates to generate.\",\n              \"format\": \"int32\"\n            }\n          }\n        },\n        \"safetySettings\": {\n          \"type\": \"array\",\n          \"description\": \"Optional. Per request settings for blocking unsafe content. Enforced on GenerateContentResponse.candidates.\",\n          \"items\": {\n            \"type\": \"object\",\n            \"description\": \"Safety settings.\",\n            \"properties\": {\n              \"method\": {\n                \"type\": \"string\",\n                \"description\": \"Optional. Specify if the threshold is used for probability or severity score. If not specified, the threshold is used for probability score.\"\n              },\n              \"threshold\": {\n                \"type\": \"string\",\n                \"description\": \"Required. The harm block threshold.\"\n              },\n              \"category\": {\n                \"type\": \"string\",\n                \"description\": \"Required. Harm category.\"\n              }\n            }\n          }\n        },\n        \"systemInstruction\": {\n          \"type\": \"object\",\n          \"description\": \"The base structured datatype containing multi-part content of a message. A `Content` includes a `role` field designating the producer of the `Content` and a `parts` field containing multi-part data that contains the content of the message turn.\",\n          \"properties\": {\n            \"parts\": {\n              \"type\": \"array\",\n              \"description\": \"Required. Ordered `Parts` that constitute a single message. Parts may have different IANA MIME types.\",\n              \"items\": {\n                \"type\": \"object\",\n                \"description\": \"A datatype containing media that is part of a multi-part `Content` message. A `Part` consists of data which has an associated datatype. A `Part` can only contain one of the accepted types in `Part.data`. A `Part` must have a fixed IANA MIME type identifying the type and subtype of the media if `inline_data` or `file_data` field is filled with raw bytes.\",\n                \"properties\": {\n                  \"inlineData\": {\n                    \"type\": \"object\",\n                    \"description\": \"Content blob. It\\u0027s preferred to send as text directly rather than raw bytes.\",\n                    \"properties\": {\n                      \"data\": {\n                        \"type\": \"string\",\n                        \"description\": \"Required. Raw bytes.\",\n                        \"format\": \"byte\"\n                      },\n                      \"mimeType\": {\n                        \"type\": \"string\",\n                        \"description\": \"Required. The IANA standard MIME type of the source data.\"\n                      }\n                    }\n                  },\n                  \"text\": {\n                    \"type\": \"string\",\n                    \"description\": \"Optional. Text part (can be code).\"\n                  },\n                  \"videoMetadata\": {\n                    \"type\": \"object\",\n                    \"description\": \"Metadata describes the input video content.\",\n                    \"properties\": {\n                      \"endOffset\": {\n                        \"type\": \"string\",\n                        \"description\": \"Optional. The end offset of the video.\",\n                        \"format\": \"google-duration\"\n                      },\n                      \"startOffset\": {\n                        \"type\": \"string\",\n                        \"description\": \"Optional. The start offset of the video.\",\n                        \"format\": \"google-duration\"\n                      }\n                    }\n                  },\n                  \"fileData\": {\n                    \"type\": \"object\",\n                    \"description\": \"URI based data.\",\n                    \"properties\": {\n                      \"mimeType\": {\n                        \"type\": \"string\",\n                        \"description\": \"Required. The IANA standard MIME type of the source data.\"\n                      },\n                      \"fileUri\": {\n                        \"type\": \"string\",\n                        \"description\": \"Required. URI.\"\n                      }\n                    }\n                  },\n                  \"functionCall\": {\n                    \"type\": \"object\",\n                    \"description\": \"A predicted [FunctionCall] returned from the model that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing the parameters and their values.\",\n                    \"properties\": {\n                      \"name\": {\n                        \"type\": \"string\",\n                        \"description\": \"Required. The name of the function to call. Matches [FunctionDeclaration.name].\"\n                      },\n                      \"args\": {\n                        \"type\": \"object\",\n                        \"description\": \"Optional. Required. The function parameters and values in JSON object format. See [FunctionDeclaration.parameters] for parameter details.\"\n                      }\n                    }\n                  },\n                  \"functionResponse\": {\n                    \"type\": \"object\",\n                    \"description\": \"The result output from a [FunctionCall] that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing any output from the function is used as context to the model. This should contain the result of a [FunctionCall] made based on model prediction.\",\n                    \"properties\": {\n                      \"response\": {\n                        \"type\": \"object\",\n                        \"description\": \"Required. The function response in JSON object format.\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\",\n                        \"description\": \"Required. The name of the function to call. Matches [FunctionDeclaration.name] and [FunctionCall.name].\"\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            \"role\": {\n              \"type\": \"string\",\n              \"description\": \"Optional. The producer of the content. Must be either \\u0027user\\u0027 or \\u0027model\\u0027. Useful to set for multi-turn conversations, otherwise can be left blank or unset.\"\n            }\n          }\n        },\n        \"tools\": {\n          \"type\": \"array\",\n          \"description\": \"Optional. A list of `Tools` the model may use to generate the next response. A `Tool` is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model.\",\n          \"items\": {\n            \"type\": \"object\",\n            \"description\": \"Tool details that the model may use to generate response. A `Tool` is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model. A Tool object should contain exactly one type of Tool (e.g FunctionDeclaration, Retrieval or GoogleSearchRetrieval).\",\n            \"properties\": {\n              \"functionDeclarations\": {\n                \"type\": \"array\",\n                \"description\": \"Optional. Function tool type. One or more function declarations to be passed to the model along with the current user query. Model may decide to call a subset of these functions by populating FunctionCall in the response. User should provide a FunctionResponse for each function call in the next turn. Based on the function responses, Model will generate the final response back to the user. Maximum 64 function declarations can be provided.\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"description\": \"Structured representation of a function declaration as defined by the [OpenAPI 3.0 specification](https://spec.openapis.org/oas/v3.0.3). Included in this declaration are the function name and parameters. This FunctionDeclaration is a representation of a block of code that can be used as a `Tool` by the model and executed by the client.\",\n                  \"properties\": {\n                    \"description\": {\n                      \"type\": \"string\",\n                      \"description\": \"Optional. Description and purpose of the function. Model uses it to decide how and whether to call the function.\"\n                    },\n                    \"name\": {\n                      \"type\": \"string\",\n                      \"description\": \"Required. The name of the function to call. Must start with a letter or an underscore. Must be a-z, A-Z, 0-9, or contain underscores, dots and dashes, with a maximum length of 64.\"\n                    },\n                    \"parameters\": {\n                      \"type\": \"object\",\n                      \"description\": \"Schema is used to define the format of input/output data. Represents a select subset of an [OpenAPI 3.0 schema object](https://spec.openapis.org/oas/v3.0.3#schema). More fields may be added in the future as needed.\",\n                      \"properties\": {\n                        \"minItems\": {\n                          \"type\": \"string\",\n                          \"description\": \"Optional. Minimum number of the elements for Type.ARRAY.\",\n                          \"format\": \"int64\"\n                        },\n                        \"format\": {\n                          \"type\": \"string\",\n                          \"description\": \"Optional. The format of the data. Supported formats: for NUMBER type: \\\"float\\\", \\\"double\\\" for INTEGER type: \\\"int32\\\", \\\"int64\\\" for STRING type: \\\"email\\\", \\\"byte\\\", etc\"\n                        },\n                        \"maxItems\": {\n                          \"type\": \"string\",\n                          \"description\": \"Optional. Maximum number of the elements for Type.ARRAY.\",\n                          \"format\": \"int64\"\n                        },\n                        \"minimum\": {\n                          \"type\": \"number\",\n                          \"description\": \"Optional. SCHEMA FIELDS FOR TYPE INTEGER and NUMBER Minimum value of the Type.INTEGER and Type.NUMBER\",\n                          \"format\": \"double\"\n                        },\n                        \"maxLength\": {\n                          \"type\": \"string\",\n                          \"description\": \"Optional. Maximum length of the Type.STRING\",\n                          \"format\": \"int64\"\n                        },\n                        \"minLength\": {\n                          \"type\": \"string\",\n                          \"description\": \"Optional. SCHEMA FIELDS FOR TYPE STRING Minimum length of the Type.STRING\",\n                          \"format\": \"int64\"\n                        },\n                        \"enum\": {\n                          \"type\": \"array\",\n                          \"description\": \"Optional. Possible values of the element of Type.STRING with enum format. For example we can define an Enum Direction as : {type:STRING, format:enum, enum:[\\\"EAST\\\", NORTH\\\", \\\"SOUTH\\\", \\\"WEST\\\"]}\",\n                          \"items\": {\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"default\": {\n                          \"type\": \"any\",\n                          \"description\": \"Optional. Default value of the data.\"\n                        },\n                        \"properties\": {\n                          \"type\": \"object\",\n                          \"description\": \"Optional. SCHEMA FIELDS FOR TYPE OBJECT Properties of Type.OBJECT.\"\n                        },\n                        \"example\": {\n                          \"type\": \"any\",\n                          \"description\": \"Optional. Example of the object. Will only populated when the object is the root.\"\n                        },\n                        \"title\": {\n                          \"type\": \"string\",\n                          \"description\": \"Optional. The title of the Schema.\"\n                        },\n                        \"pattern\": {\n                          \"type\": \"string\",\n                          \"description\": \"Optional. Pattern of the Type.STRING to restrict a string to a regular expression.\"\n                        },\n                        \"minProperties\": {\n                          \"type\": \"string\",\n                          \"description\": \"Optional. Minimum number of the properties for Type.OBJECT.\",\n                          \"format\": \"int64\"\n                        },\n                        \"nullable\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Optional. Indicates if the value may be null.\"\n                        },\n                        \"maximum\": {\n                          \"type\": \"number\",\n                          \"description\": \"Optional. Maximum value of the Type.INTEGER and Type.NUMBER\",\n                          \"format\": \"double\"\n                        },\n                        \"type\": {\n                          \"type\": \"string\",\n                          \"description\": \"Optional. The type of the data.\"\n                        },\n                        \"required\": {\n                          \"type\": \"array\",\n                          \"description\": \"Optional. Required properties of Type.OBJECT.\",\n                          \"items\": {\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"maxProperties\": {\n                          \"type\": \"string\",\n                          \"description\": \"Optional. Maximum number of the properties for Type.OBJECT.\",\n                          \"format\": \"int64\"\n                        },\n                        \"description\": {\n                          \"type\": \"string\",\n                          \"description\": \"Optional. The description of the data.\"\n                        }\n                      }\n                    }\n                  }\n                }\n              },\n              \"googleSearchRetrieval\": {\n                \"type\": \"object\",\n                \"description\": \"Tool to retrieve public web data for grounding, powered by Google.\",\n                \"properties\": {\n                  \"disableAttribution\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"Optional. Disable using the result from this tool in detecting grounding attribution. This does not affect how the result is given to the model for generation.\"\n                  }\n                }\n              },\n              \"retrieval\": {\n                \"type\": \"object\",\n                \"description\": \"Defines a retrieval tool that model can call to access external knowledge.\",\n                \"properties\": {\n                  \"disableAttribution\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"Optional. Disable using the result from this tool in detecting grounding attribution. This does not affect how the result is given to the model for generation.\"\n                  },\n                  \"vertexAiSearch\": {\n                    \"type\": \"object\",\n                    \"description\": \"Retrieve from Vertex AI Search datastore for grounding. See https://cloud.google.com/vertex-ai-search-and-conversation\",\n                    \"properties\": {\n                      \"datastore\": {\n                        \"type\": \"string\",\n                        \"description\": \"Required. Fully-qualified Vertex AI Search\\u0027s datastore resource ID. Format: projects/{project}/locations/{location}/collections/{collection}/dataStores/{dataStore}\"\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"contents\": {\n          \"type\": \"array\",\n          \"description\": \"Required. The content of the current conversation with the model. For single-turn queries, this is a single instance. For multi-turn queries, this is a repeated field that contains conversation history + latest request.\",\n          \"items\": {\n            \"type\": \"object\",\n            \"description\": \"The base structured datatype containing multi-part content of a message. A `Content` includes a `role` field designating the producer of the `Content` and a `parts` field containing multi-part data that contains the content of the message turn.\",\n            \"properties\": {\n              \"parts\": {\n                \"type\": \"array\",\n                \"description\": \"Required. Ordered `Parts` that constitute a single message. Parts may have different IANA MIME types.\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"description\": \"A datatype containing media that is part of a multi-part `Content` message. A `Part` consists of data which has an associated datatype. A `Part` can only contain one of the accepted types in `Part.data`. A `Part` must have a fixed IANA MIME type identifying the type and subtype of the media if `inline_data` or `file_data` field is filled with raw bytes.\",\n                  \"properties\": {\n                    \"inlineData\": {\n                      \"type\": \"object\",\n                      \"description\": \"Content blob. It\\u0027s preferred to send as text directly rather than raw bytes.\",\n                      \"properties\": {\n                        \"data\": {\n                          \"type\": \"string\",\n                          \"description\": \"Required. Raw bytes.\",\n                          \"format\": \"byte\"\n                        },\n                        \"mimeType\": {\n                          \"type\": \"string\",\n                          \"description\": \"Required. The IANA standard MIME type of the source data.\"\n                        }\n                      }\n                    },\n                    \"text\": {\n                      \"type\": \"string\",\n                      \"description\": \"Optional. Text part (can be code).\"\n                    },\n                    \"videoMetadata\": {\n                      \"type\": \"object\",\n                      \"description\": \"Metadata describes the input video content.\",\n                      \"properties\": {\n                        \"endOffset\": {\n                          \"type\": \"string\",\n                          \"description\": \"Optional. The end offset of the video.\",\n                          \"format\": \"google-duration\"\n                        },\n                        \"startOffset\": {\n                          \"type\": \"string\",\n                          \"description\": \"Optional. The start offset of the video.\",\n                          \"format\": \"google-duration\"\n                        }\n                      }\n                    },\n                    \"fileData\": {\n                      \"type\": \"object\",\n                      \"description\": \"URI based data.\",\n                      \"properties\": {\n                        \"fileUri\": {\n                          \"type\": \"string\",\n                          \"description\": \"Required. URI.\"\n                        },\n                        \"mimeType\": {\n                          \"type\": \"string\",\n                          \"description\": \"Required. The IANA standard MIME type of the source data.\"\n                        }\n                      }\n                    },\n                    \"functionCall\": {\n                      \"type\": \"object\",\n                      \"description\": \"A predicted [FunctionCall] returned from the model that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing the parameters and their values.\",\n                      \"properties\": {\n                        \"name\": {\n                          \"type\": \"string\",\n                          \"description\": \"Required. The name of the function to call. Matches [FunctionDeclaration.name].\"\n                        },\n                        \"args\": {\n                          \"type\": \"object\",\n                          \"description\": \"Optional. Required. The function parameters and values in JSON object format. See [FunctionDeclaration.parameters] for parameter details.\"\n                        }\n                      }\n                    },\n                    \"functionResponse\": {\n                      \"type\": \"object\",\n                      \"description\": \"The result output from a [FunctionCall] that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing any output from the function is used as context to the model. This should contain the result of a [FunctionCall] made based on model prediction.\",\n                      \"properties\": {\n                        \"response\": {\n                          \"type\": \"object\",\n                          \"description\": \"Required. The function response in JSON object format.\"\n                        },\n                        \"name\": {\n                          \"type\": \"string\",\n                          \"description\": \"Required. The name of the function to call. Matches [FunctionDeclaration.name] and [FunctionCall.name].\"\n                        }\n                      }\n                    }\n                  }\n                }\n              },\n              \"role\": {\n                \"type\": \"string\",\n                \"description\": \"Optional. The producer of the content. Must be either \\u0027user\\u0027 or \\u0027model\\u0027. Useful to set for multi-turn conversations, otherwise can be left blank or unset.\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"
		},
		{
			"key": "`Task_1_connectorOutputPayload`",
			"dataType": "JSON_VALUE",
			"defaultValue": {},
			"isTransient": true,
			"producer": "1_1",
			"jsonSchema": "{\n  \"type\": \"array\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"Status\": {\n        \"type\": \"number\",\n        \"description\": \"Status Code received.\"\n      },\n      \"ResponseBody\": {\n        \"type\": \"string\"\n      },\n      \"ResponseHeaders\": {\n        \"type\": \"object\",\n        \"description\": \"Response headers. Will consist of (key,value) and (key, list of value) pairs.\"\n      }\n    },\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n  }\n}"
		},
		{
			"key": "ErrorMessage",
			"dataType": "STRING_VALUE",
			"defaultValue": {}
		},
		{
			"key": "cehExceptionPayload",
			"dataType": "JSON_VALUE",
			"defaultValue": {},
			"jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"timestamp\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\"\n    },\n    \"integration_process\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"type\": \"string\"\n        },\n        \"region\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"failed_component\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"component_name\": {\n          \"type\": \"string\"\n        },\n        \"component_id\": {\n          \"type\": \"string\"\n        },\n        \"description\": {\n          \"type\": \"string\"\n        },\n        \"component_type\": {\n          \"type\": \"string\"\n        },\n        \"ex\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"status_code\": {\n              \"type\": \"integer\"\n            },\n            \"message\": {\n              \"type\": \"string\"\n            },\n            \"stack_trace\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"additional_metadata\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"request_id\": {\n          \"type\": \"string\"\n        },\n        \"project_id\": {\n          \"type\": \"string\"\n        },\n        \"environment\": {\n          \"type\": \"string\"\n        },\n        \"integration_type\": {\n          \"type\": \"string\"\n        },\n        \"retry_count\": {\n          \"type\": \"integer\"\n        }\n      }\n    }\n  }\n}"
		},
		{
			"key": "errorTrigger",
			"dataType": "STRING_VALUE",
			"defaultValue": {}
		},
		{
			"key": "`ExecutionMode`",
			"dataType": "STRING_VALUE",
			"defaultValue": {
				"stringValue": ""
			},
			"isTransient": true
		},
		{
			"key": "`ErrorInfo`",
			"dataType": "JSON_VALUE",
			"defaultValue": {
				"jsonValue": "{\n  \"message\": \"\",\n  \"code\": 0.0\n}"
			},
			"isTransient": true,
			"jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"code\": {\n      \"type\": \"number\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}"
		},
		{
			"key": "`ExecutionId`",
			"dataType": "STRING_VALUE",
			"defaultValue": {
				"stringValue": ""
			},
			"isTransient": true
		},
		{
			"key": "`IntegrationName`",
			"dataType": "STRING_VALUE",
			"defaultValue": {
				"stringValue": ""
			},
			"isTransient": true
		},
		{
			"key": "`Region`",
			"dataType": "STRING_VALUE",
			"defaultValue": {
				"stringValue": ""
			},
			"isTransient": true
		},
		{
			"key": "`ProjectId`",
			"dataType": "STRING_VALUE",
			"defaultValue": {
				"stringValue": ""
			},
			"isTransient": true
		},
		{
			"key": "model-name",
			"dataType": "STRING_VALUE",
			"defaultValue": {
				"stringValue": "gemini-1.5-pro"
			},
			"inputOutputType": "IN"
		},
		{
			"key": "gcsURI",
			"dataType": "STRING_VALUE",
			"defaultValue": {
				"stringValue": ""
			},
			"inputOutputType": "IN"
		},
		{
			"key": "googleSearchGrounding",
			"dataType": "BOOLEAN_VALUE",
			"defaultValue": {
				"booleanValue": false
			},
			"inputOutputType": "IN"
		},
		{
			"key": "maxOutputTokens",
			"dataType": "STRING_VALUE",
			"defaultValue": {
				"stringValue": "2048"
			},
			"inputOutputType": "IN"
		},
		{
			"key": "mimeType",
			"dataType": "STRING_VALUE",
			"defaultValue": {
				"stringValue": ""
			},
			"inputOutputType": "IN"
		},
		{
			"key": "output",
			"dataType": "STRING_VALUE",
			"defaultValue": {},
			"inputOutputType": "OUT"
		}
	],
	"integrationConfigParameters": [
		{
			"parameter": {
				"key": "`CONFIG_vertex-project`",
				"dataType": "STRING_VALUE",
				"defaultValue": {
					"stringValue": "cabral-app-integration"
				},
				"displayName": "`CONFIG_vertex-project`"
			},
			"value": {
				"stringValue": "cabral-app-integration"
			}
		},
		{
			"parameter": {
				"key": "`CONFIG_vertex-region`",
				"dataType": "STRING_VALUE",
				"defaultValue": {
					"stringValue": "us-central1"
				},
				"displayName": "`CONFIG_vertex-region`"
			},
			"value": {
				"stringValue": "us-central1"
			}
		},
		{
			"parameter": {
				"key": "`CONFIG_vertex-connection-name`",
				"dataType": "STRING_VALUE",
				"defaultValue": {
					"stringValue": "projects/cabral-app-integration/locations/southamerica-east1/connections/vertex-connection"
				},
				"displayName": "`CONFIG_vertex-connection-name`"
			},
			"value": {
				"stringValue": "projects/cabral-app-integration/locations/southamerica-east1/connections/vertex-connection"
			}
		}
	],
	"databasePersistencePolicy": "",
	"cloudLoggingDetails": {
		"cloudLoggingSeverity": "",
		"enableCloudLogging": false
	}
}